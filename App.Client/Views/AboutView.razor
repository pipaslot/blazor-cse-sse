@page "/about"
@inject IMediator Mediator
@inject ILogger<AboutView> Logger
@using App.Shared.Contact

<BContainer>
    <Spinner Show="_loading" />
    <h1>About</h1>
    <p>
        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Vivamus luctus egestas leo. In sem justo, commodo ut, suscipit at, pharetra vitae, orci. Donec vitae arcu. Donec iaculis gravida nulla.
        Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Mauris dictum facilisis augue.
        Praesent id justo in neque elementum ultrices. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos hymenaeos. Mauris dolor felis, sagittis at, luctus sed, aliquam non, tellus.
    </p>
    <h2>Contact us</h2>

    <BContainer>
        <Spinner Show="_loading" />
        <EditForm Model="@_model" OnValidSubmit="@SubmitValidForm">
            <FluentValidationValidator />
            <ValidationSummary />

            <p>
                <label>First name: </label>
                <InputText @bind-Value="@_model.Firstname" />
                <ValidationMessage For="@(() => _model.Firstname)" />
            </p>

            <p>
                <label>Lastname: </label>
                <InputText @bind-Value="@_model.Lastname" />
                <ValidationMessage For="@(() => _model.Lastname)" />
            </p>

            <p>
                <label>Email Address: </label>
                <InputText @bind-Value="@_model.Email" />
                <ValidationMessage For="@(() => _model.Email)" />
            </p>

            <p>
                <label>Message: </label>
                <InputTextArea @bind-Value="@_model.Message" />
                <ValidationMessage For="@(() => _model.Message)" />
            </p>

            <button type="submit">Save</button> <button @onclick="HackFrontendValidation">Send empty form without validation on frontend</button>
            @if (_wasSent == SendingStatus.Sent)
            {
                <p>
                    Thank you for your feedback.
                </p>
            }
            @if (_wasSent == SendingStatus.NotAccepted)
            {
                <p>
                    We are sorry, but your message was not accepted.
                </p>
            }
            @if (_wasSent == SendingStatus.Failed)
            {
                <p>
                    We are sorry, there happen some error.
                </p>
            }

        </EditForm>
    </BContainer>
</BContainer>
@code{

    bool _loading;
    SendingStatus _wasSent = SendingStatus.NotSent;
    ContactFormRequest.Query _model = new ContactFormRequest.Query();

    async Task SubmitValidForm()
    {
        await SendData(_model);
    }

    async Task HackFrontendValidation()
    {
        await SendData(new ContactFormRequest.Query());
    }

    private async Task SendData(ContactFormRequest.Query data)
    {
        _loading = true;
        var result = await Mediator.Send(data);
        if (result.Success)
        {
            _wasSent = result.Result.Success ? SendingStatus.Sent : SendingStatus.NotAccepted;
            _model = new ContactFormRequest.Query();
        }
        else
        {
            _wasSent = SendingStatus.Failed;
        }
        _loading = false;
    }

    public enum SendingStatus
    {
        NotSent,
        Sent,
        Failed,
        NotAccepted
    }

}
