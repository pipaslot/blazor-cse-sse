@page "/"
@using App.Shared.DemoActions
@using System.Threading
@inject IMediator Mediator

<Spinner Show="ShowSpinner"></Spinner>
<BContainer>
    <h1>@LayoutResource.Home</h1>

    <h4>Welcome to the Blazor CSE/SSE demonstration solution</h4>

    <button @onclick="DispatchErrorCommand">Fire event throwing exception on server side</button> 
    <button @onclick="CallForbiddenOperation">Fire event for which user does not have permission</button> 
    <button @onclick="MultiHandlerCommand">Fire multiple command handlers together for one command</button> 
    <button @onclick="StartInfiniteCommand">Fire infinite command canceled on UI after 3 seconds</button> 
    <div>@DispatchError</div>
   
</BContainer>
@code{
    string DispatchError = "";
    bool ShowSpinner;
    private CancellationTokenSource infiniteCommandCancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(5));

    async Task DispatchErrorCommand()
    {
        await Dispatch(new ValidationErrorGeneratorMessage.Command());
    }

    async Task CallForbiddenOperation()
    {
        await Dispatch(new AuthenticationErrorMessage.Command());
    }

    async Task MultiHandlerCommand()
    {
        await Dispatch(new MultiHandlerMessage.Command());
    }

    private async Task Dispatch(IMessage request)
    {
        ShowSpinner = true;
        var dispatchResult = await Mediator.Dispatch(request);
        DispatchError = dispatchResult.ErrorMessage;
        ShowSpinner = false;
    }

    private async Task StartInfiniteCommand()
    {
        ShowSpinner = true;
        var action = Mediator.Dispatch(new InfiniteMessage.Command(), infiniteCommandCancellationTokenSource.Token);
        await Task.Delay(3000);
        infiniteCommandCancellationTokenSource.Cancel();
        await action;
        ShowSpinner = false;
    }
}
